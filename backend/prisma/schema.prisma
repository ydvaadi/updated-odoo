// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  name         String
  email        String   @unique
  passwordHash String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  createdProjects    Project[]      @relation("ProjectCreator")
  memberships        Membership[]
  assignedTasks      Task[]         @relation("TaskAssignee")
  sentMessages       Message[]      @relation("MessageAuthor")
  notifications      Notification[]
  refreshTokens      RefreshToken[]

  @@map("users")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  creator     User         @relation("ProjectCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  memberships Membership[]
  tasks       Task[]
  messages    Message[]
  notifications Notification[]

  @@map("projects")
}

model Membership {
  id        String   @id @default(cuid())
  userId    String
  projectId String
  role      Role     @default(MEMBER)
  createdAt DateTime @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@map("memberships")
}

model Task {
  id          String      @id @default(cuid())
  title       String
  description String?
  status      TaskStatus  @default(TODO)
  priority    Priority    @default(MEDIUM)
  dueDate     DateTime?
  projectId   String
  assigneeId  String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  project  Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignee User?   @relation("TaskAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)

  @@map("tasks")
}

model Message {
  id        String   @id @default(cuid())
  content   String
  projectId String
  authorId  String
  createdAt DateTime @default(now())

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  author  User    @relation("MessageAuthor", fields: [authorId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  message   String
  userId    String
  projectId String?
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model RefreshToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

enum Role {
  MEMBER
  ADMIN
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum NotificationType {
  TASK_ASSIGNED
  TASK_COMPLETED
  TASK_OVERDUE
  PROJECT_INVITED
  PROJECT_MEMBER_ADDED
  PROJECT_MEMBER_REMOVED
  MESSAGE_POSTED
}
